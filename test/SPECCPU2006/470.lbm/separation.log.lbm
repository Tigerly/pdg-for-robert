loadValue
loadValue is uncolored
LBM_initializeSpecialCellsForLDC
LBM_initializeSpecialCellsForLDC is colored
LBM_initializeSpecialCellsForChannel
LBM_initializeSpecialCellsForChannel is colored
LBM_allocateGrid
LBM_allocateGridis uncolored
LBM_freeGrid
LBM_freeGridis uncolored
LBM_initializeGrid
LBM_initializeGrid is colored
LBM_swapGrids
LBM_swapGrids is uncolored
LBM_loadObstacleFile
LBM_loadObstacleFile is colored
LBM_performStreamCollide
LBM_performStreamCollide is colored
LBM_handleInOutFlow
LBM_handleInOutFlow is colored
LBM_showGridStatistics
LBM_showGridStatistics is colored
LBM_storeVelocityField
LBM_storeVelocityField is colored
LBM_compareVelocityField
LBM_compareVelocityField is colored
storeValue
storeValueis uncolored
MAIN_finalize
MAIN_finalize is colored
main
main is colored
MAIN_parseCommandLine
MAIN_parseCommandLineis uncolored
MAIN_printInfo
MAIN_printInfois uncolored
MAIN_initialize
MAIN_initialize is colored
non-library functions in total: 19
sensitive functions count  : 12
insensitive functions count: 7


12 sensitive functions:

main
LBM_initializeSpecialCellsForLDC
LBM_initializeSpecialCellsForChannel
LBM_initializeGrid
LBM_loadObstacleFile
LBM_performStreamCollide
LBM_handleInOutFlow
LBM_showGridStatistics
LBM_storeVelocityField
LBM_compareVelocityField

7 insensitive functions:

MAIN_parseCommandLine   call void @MAIN_parseCommandLine(i32 %0, i8** %1, %struct.MAIN_Param* %param)
storeValue
loadValue
LBM_allocateGrid

  call void @LBM_allocateGrid(double** bitcast ([26000000 x double]** @srcGrid to double**))
  call void @LBM_allocateGrid(double** bitcast ([26000000 x double]** @dstGrid to double**))

LBM_freeGrid
  call void @LBM_freeGrid(double** bitcast ([26000000 x double]** @srcGrid to double**))
  call void @LBM_freeGrid(double** bitcast ([26000000 x double]** @dstGrid to double**))
LBM_swapGrids
  call void @LBM_swapGrids([26000000 x double]** @srcGrid, [26000000 x double]** @dstGrid)

MAIN_printInfo

  call void @MAIN_printInfo(%struct.MAIN_Param* %param)


typedef struct {
	int nTimeSteps;
	char* resultFilename;
	MAIN_Action action;
	MAIN_SimType simType;
	char* obstacleFilename;
} MAIN_Param;






























